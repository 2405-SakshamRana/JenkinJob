<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1249.v7d974144cc14">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>zone_id</string>
        <string>api_url</string>
        <string>token</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>15</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.34">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>token</name>
          <description>Neoload Web Token</description>
          <defaultValue>sJprmtTyQL5YRUqdVG4hQkPl</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>api_url</name>
          <description>NeoLoad Web Api Url</description>
          <defaultValue>http://neoload-web-api.int.acd.mykronos.com</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>zone_id</name>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>dynamic_zone</string>
              <string>Regression Zone</string>
              <string>Default zone</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Email</name>
          <defaultValue>saksham.rana@ukg.com,vinay.sharma@ukg.com</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.9">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2803.v1a_f77ffcc773">
    <script>// def uniq_id = System.currentTimeMillis()

pipeline {
    //agent { label 'master || linux_node'}
  agent none
  

  parameters {
    string(defaultValue: "sJprmtTyQL5YRUqdVG4hQkPl", description: 'Neoload Web Token', name: 'token')
    string(defaultValue: "http://neoload-web-api.int.acd.mykronos.com", description: 'NeoLoad Web Api Url', name: 'api_url')
    choice(choices: ['dynamic_zone','Regression Zone','Default zone'], name: 'zone_id')
  }

  stages {
      
      
    stage('Neoload_executetest_cli_schedule') {
        steps{
            build job: 'child_jobs/Neoload_ExecuteTest_CLI',
            //def neoload = build(job: 'Neoload_ExecuteTest_CLI',
         parameters: [string(name: 'Workspace_Name', value: "Platform"),
         string(name: 'Project', value: "BIRT_SHIFT_LEFT_HCA_NON_HCA_Test_Schedule"),
         string(name: 'Scenario', value: "BIRT_Scheule_Reports_20k"),
         string(name: 'Load_Generators', value: "5"),
         string(name: 'Vusers', value: "25")
         ]
         // env.CURRENT_TIME = neoload.getBuildVariables().get('currentDate')
         // env.Start_TIME = neoload.getBuildVariables().get('start_TimeStamp')
         // env.End_TIME = neoload.getBuildVariables().get('endTime')

        // copyArtifacts(projectName: 'Neoload_ExecuteTest_CLI', selector: specific("${neoload.number}"))        
         }
    }
    
    stage('Waiting for Job'){
        steps{
        build job: 'WaitingJob'
        }
    }
    
    stage('Send Email with Current US Time') {
            agent any
            steps {
                script {
                    def currentTime = sh(returnStdout: true, script: 'date +"%Y-%m-%d %H:%M %Z"').trim()
                    echo "Current UTC Time: ${currentTime}"
                    emailext (
                        to: '${Email}',
                        subject: 'Current Time after Schedule Test + Waiting Time',
                        body: "Your Schedule Test has been completed Successfully! \n The current UTC time is: ${currentTime} ",
                        mimeType: 'text/plain'
                    )
                }
            }
        }
        
    
    stage('Neoload_executetest_cli_adhoc') {
        steps{
            build job: 'child_jobs/Neoload_ExecuteTest_CLI',
            //def neoload = build(job: 'Neoload_ExecuteTest_CLI',
        parameters: [string(name: 'Workspace_Name', value: "Platform"),
        string(name: 'Project', value: "BIRT_SHIFT_LEFT_HCA_NON_HCA_Test_Adhoc"),
        string(name: 'Scenario', value: "BIRT_Adhoc_Reports_20K"),
        string(name: 'Load_Generators', value: "5"),
        string(name: 'Vusers', value: "40")
        ]
        // env.CURRENT_TIME = neoload.getBuildVariables().get('currentDate')
        // env.Start_TIME = neoload.getBuildVariables().get('start_TimeStamp')
        // env.End_TIME = neoload.getBuildVariables().get('endTime')

        //copyArtifacts(projectName: 'NeoLoad_Execution', selector: specific("${neoload.number}"))        
        }
    }
}

}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>