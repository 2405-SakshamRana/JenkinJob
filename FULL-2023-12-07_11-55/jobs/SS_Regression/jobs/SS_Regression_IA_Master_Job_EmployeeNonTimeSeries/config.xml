<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1249.v7d974144cc14">
  <actions>
    <org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction plugin="workflow-multibranch@716.vc692a_e52371b_">
      <jobPropertyDescriptors>
        <string>hudson.model.ParametersDefinitionProperty</string>
        <string>jenkins.model.BuildDiscarderProperty</string>
      </jobPropertyDescriptors>
    </org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.34">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Email</name>
          <defaultValue>saksham.rana@ukg.com</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.9">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2803.v1a_f77ffcc773">
    <script>def uniq_id = System.currentTimeMillis()
env.uniq_id = uniq_id
def long start = currentBuild.startTimeInMillis/1000
def long end 
// Main Method starts here
node ('master') { 
     
    label 'master || linux_node'
	properties([
		buildDiscarder(logRotator(numToKeepStr: '10')),
		parameters([
		string(name: 'Email', defaultValue: 'saksham.rana@ukg.com')
		])])  


//MAIN execution

stage('Fetch WFM Details') { 
        def build_result = build(job: 'Fetch_deployment_Details', parameters: [string(name: 'EXECUTION_NAME', value: 'WFM_HA_PIPELINE [wfm_10] [ins_01] [perf_SL]')])
        println "${build_result.number}"
		env.fnt = build_result.getBuildVariables().get('fnt')
		env.bck = build_result.getBuildVariables().get('bck')
		env.api = build_result.getBuildVariables().get('api')
		env.bgp = build_result.getBuildVariables().get('bgp')
		env.db_server = build_result.getBuildVariables().get('param_dbserver')
		env.db_name = build_result.getBuildVariables().get('param_dbname')
		println env.fnt + "," + env.bck + "," + env.api + "," + env.bgp + "," + env.db_server + "," + env.db_name
		if (!fnt || !bck || !api || !bgp || !db_server || !db_name)
			throw new Exception("fnt/bgp/api/bck/param_dbserver could not be found!")
		copyArtifacts(projectName: 'Fetch_deployment_Details', selector: specific("${build_result.number}"))
	}
	fnt += env.fnt
	bck += env.bck
	api += env.api
	bgp += env.bgp
	db_server = env.db_server
	db_name = env.db_name
	//echo "front:"+fnt+"\nback:"+bck+"\napi:"+api+"\nbgp:"+bgp+"\ndb_server:"+db_server+"\ndb_name:"+db_name

stage("Create users on WFM nodes") {
		def wfm_nodes = []
		wfm_nodes += env.fnt
		wfm_nodes += env.bck
		wfm_nodes += env.api
		wfm_nodes += env.bgp
		wfm_nodes += env.db_server
		println "wfm_nodes: " + wfm_nodes.toString()
        script {
          def allJobs = [:]
          for(def curJob=0; curJob&lt;wfm_nodes.size(); curJob++) {
			def jobName = wfm_nodes[curJob]
            allJobs[jobName] =  {
			  stage(jobName) {
				build (job: "create_default_users",
                    parameters:
                    [string(name: 'PROJECT', value: "gce_automation_cd"), string(name: 'SERVER_NAME', value: jobName)])
			}
            }
          }
          parallel(allJobs)
        }   
    }
	stage('server_health_check') {
 		 server_health_check_build = build(job: 'server_health_check_SS_Regression',
 		parameters: [string(name: 'nmon_interval', value: "1"),
 		string(name: 'nmon_iteration', value: "30"),
 		string(name: 'servers_fqdn', value: "${env.fnt},${env.bck},${env.api},${env.bgp},${env.db_server}"),
 		string(name: 'unique', value: "${env.uniq_id}"),
 		string(name: 'email_recipients', value: "${params.Email}")
 		])
}

	stage('Load_Test_Execution') 
{
 

echo "endTime= ${end}"
def IA_loadTest1 = build(job: 'IA_ExecutionJobs/neoload_web_curl_EmployeeNonTimeSeries')


 end=start+2300
	 env.Start_TIME = start
      env.End_TIME = end
        	println("${env.Start_TIME}")
			println("${env.End_TIME}")
					
 sh """ 
          #!/bin/bash 
            echo "startTime=${start}"&gt; env.props
  echo "endTime=${end}"&gt;&gt; env.props
  echo buildno=${currentBuild.number} &gt; build.props 

"""
					
 //env.Start_TIME_IA = start
 //env.End_TIME_IA = end

  archiveArtifacts artifacts: '*.props', followSymlinks: false 
}
				


stage('Analyse_Parse_Publish_Results')
                     {
                       publish_build = build(job: 'Analyse_publish_results',
                         parameters: [string(name: 'start_time', value: "${start}"),
 						string(name: 'end_time', value: "${end}"),
 						string(name: 'master_build_number', value: "${currentBuild.number}"),
 						string(name: 'master_job_name', value: "${env.JOB_NAME}"),
 						string(name: 'subject', value: "Performance Regression Test Results -IA"),
 						string(name: 'email', value: "${Email}"),
 						string(name: 'uniq_id', value: "${env.uniq_id}"),
 						string(name: 'test_type', value: "ORG_TIMESERIES")
])
  }





}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>