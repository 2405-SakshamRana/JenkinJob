<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>This job restores the selected tenants from dbs36, using existing bash files.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>5</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33.1">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>db_server</name>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>db_name</name>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>db_restore_op</name>
          <description>Full Regression - Restores the common, healthcare, and new manufacturing tenants.
Full Work Mfg  - Restores the common and work mfg tenants.
Full Project Bolt - Restores the common and project bold tenants.
Tenant Only - Restores only the specified staging tenant into an existing database, replacing any existing staging tenants by that name.
</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Full Regression</string>
              <string>Full Work Mfg</string>
              <string>Full Project Bolt</string>
              <string>Tenant Only - New Mfg</string>
              <string>Tenant Only - Healthcare</string>
              <string>Tenant Only - Work Mfg</string>
              <string>Tenant Only - Project Bolt</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>staging_host</name>
          <description>The host name for the staging dumps.</description>
          <defaultValue>kacd02-prf01-ins01-wfm36-dbs-01.int.acd.mykronos.com</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.8">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>pipeline {
    agent any
    stages{
        stage('CleanWorkspace') {
            steps{
                cleanWs()
            }
        }
        stage('Restore Common'){
            when{
                expression { params.db_restore_op == 'Full Regression' || 
                             params.db_restore_op == 'Full Work Mfg' || 
                             params.db_restore_op == 'Full Project Bolt'
                }
            }
            steps{
                script{
        	        def credential_id  = "engperfuser"
                    withCredentials([
                        usernamePassword(credentialsId: credential_id, passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME'),
                    ]) {
                        sh '''
                        sshpass -p $PASSWORD ssh -o UserKnownHostsFile=/dev/null -o ServerAliveCountMax=240 -o ServerAliveInterval=30 -o StrictHostKeyChecking=no -o TCPKeepAlive=no -T $USERNAME@${staging_host}&lt;&lt;EOF
                        cd /data/backup/staging
                        echo "Starting restore of common tenant."
                        ./restore-weekly.sh ${db_server} ${db_name} COMMON
                        echo "Restore of new db is complete."
                        \nEOF
                        '''   
                    }
                }
            }
        }
        stage('Restore New Mfg'){
            when{
                expression { params.db_restore_op == 'Tenant Only - New Mfg' || 
                             params.db_restore_op == 'Full Regression'
                }
            }
            steps{
                script{
            	    def credential_id  = "engperfuser"
                    withCredentials([
                        usernamePassword(credentialsId: credential_id, passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME'),
                    ]) {
                        sh '''
                        sshpass -p $PASSWORD ssh -o UserKnownHostsFile=/dev/null -o ServerAliveCountMax=240 -o ServerAliveInterval=30 -o StrictHostKeyChecking=no -o TCPKeepAlive=no -T $USERNAME@${staging_host}&lt;&lt;EOF
                        cd /data/backup/staging
                        echo "Starting restore of new manufacturing staging tenant."
                        ./restore-weekly.sh ${db_server} ${db_name} NEW_MFG
                        echo "Restore of new db is complete."
                        \nEOF
                        '''   
                    }
                }
            }
        }
        //restores healthcare staging tenant only
        stage('Restore Healthcare'){
            when{
                expression { params.db_restore_op == 'Tenant Only - Healthcare' || 
                             params.db_restore_op == 'Full Regression'
                    
                }
            }
            steps{
                script{
            	    def credential_id  = "engperfuser"
                    withCredentials([
                        usernamePassword(credentialsId: credential_id, passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME'),
                    ]) {
                        sh '''
                        sshpass -p $PASSWORD ssh -o UserKnownHostsFile=/dev/null -o ServerAliveCountMax=240 -o ServerAliveInterval=30 -o StrictHostKeyChecking=no -o TCPKeepAlive=no -T $USERNAME@${staging_host}&lt;&lt;EOF
                        cd /data/backup/staging
                        echo "Starting restore of healthcare staging tenant."
                        ./restore-weekly.sh ${db_server} ${db_name} HC
                        echo "Restore of new db is complete."
                        \nEOF
                        '''   
                    }
                }
            }
        }
         //restores healthcare staging tenant only
        stage('Restore Work Mfg'){
            when{
                expression { params.db_restore_op == 'Tenant Only - Work Mfg' ||
                             params.db_restore_op == 'Full Work Mfg'
                }
            }
            steps{
                script{
            	    def credential_id  = "engperfuser"
                    withCredentials([
                        usernamePassword(credentialsId: credential_id, passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME'),
                    ]) {
                        sh '''
                        sshpass -p $PASSWORD ssh -o UserKnownHostsFile=/dev/null -o ServerAliveCountMax=240 -o ServerAliveInterval=30 -o StrictHostKeyChecking=no -o TCPKeepAlive=no -T $USERNAME@${staging_host}&lt;&lt;EOF
                        cd /data/backup/staging
                        echo "Starting restore of work mfg staging tenant."
                        ./restore-weekly.sh ${db_server} ${db_name} WORK_MFG
                        echo "Restore of new db is complete."
                        \nEOF
                        '''   
                    }
                }
            }
        }
         //restores healthcare staging tenant only
        stage('Restore Project Bolt'){
            when{
                expression { params.db_restore_op == 'Tenant Only - Project Bolt' ||
                             params.db_restore_op == 'Full Project Bolt'
                }
            }
            steps{
                script{
            	    def credential_id  = "engperfuser"
                    withCredentials([
                        usernamePassword(credentialsId: credential_id, passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME'),
                    ]) {
                        sh '''
                        sshpass -p $PASSWORD ssh -o UserKnownHostsFile=/dev/null -o ServerAliveCountMax=240 -o ServerAliveInterval=30 -o StrictHostKeyChecking=no -o TCPKeepAlive=no -T $USERNAME@${staging_host}&lt;&lt;EOF
                        cd /data/backup/staging
                        echo "Starting restore of project bolt staging tenant."
                        ./restore-weekly.sh ${db_server} ${db_name} PRJBOLT_MFG
                        echo "Restore of new db is complete."
                        \nEOF
                        '''   
                    }
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>