<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions/>
  <description>This job runs on a remote Neoload controller.  The job unzips the project to Neoload directory.  Executes the Neoload Scenario(s).  Zips up the reports generated by Neoload and copies them to the /tmp directory on the Jenkins master node.&#13;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>5</daysToKeep>
        <numToKeep>15</numToKeep>
        <artifactDaysToKeep>15</artifactDaysToKeep>
        <artifactNumToKeep>15</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33.1">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Project_Path</name>
          <description>Relative path from the repository root ('neoload') to zip containing the .nlp file.
For example, \regression\timekeeping\api\project</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Project_Zip</name>
          <description>The name of zip file containing .nlp file.  For example, regression_api.zip
</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>Scenario</name>
          <description>Name of scenario(s) to be executed, in case of multiple scenarios please input comma separated values.
For example, 
01 - Accruals, 02 - Approvals,...</description>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Users</name>
          <description>The number of virtual users to lease</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Duration</name>
          <description>The duration of the lease (how many hours the test will run for)</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Submitter</name>
          <description>firstname.lastname@ukg.com</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.8">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>timestamps {
    node ('pipeline-neoload_controller') { 
        //NTS license can be found by logging into http://wfd-tc530:8080/#!licenses (admin/admin)
        def NeotysTeamLicense='MCwCFBPKpem5ckDMZqNUmrH/eZQqzXarAhRo62I0Mlj+GmjQR07vhO51DCoiuQ=='
        def jenkins_master="perfautomation250k.int.kronos.com"
        def Neoload_Dir = "C:\\Users\\superuser\\Documents\\NeoLoad Projects"
        def Neoload_Exe  = "C:\\Program Files\\NeoLoad 7.11\\bin\\NeoLoadCmd"
        def Automation_Jar_Path = "\\java_lib\\automation_project\\"
        def Automation_Jar_Name = "OneClick_Automation-0.0.1-SNAPSHOT-spring-boot.jar"
        def Project_Name = "${Project_Zip}"- ~/\.\w+$/
        def scenarios = "${params.Scenario}".split(',');
        stage ('Checkout Neoload Project and automation jar.') 
        {
            dir("${workspace}"){
                //checkout([$class: 'GitSCM', branches: [[name: '*/${Branch}']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'neoload'], [$class: 'CloneOption', depth: 1, noTags: false, honorRefspec: true, reference: 'C:\\\\neoload_reference_repo', shallow: true]], submoduleCfg: [], userRemoteConfigs: [[refspec: '+refs/heads/develop:refs/remotes/origin/develop', credentialsId: 'remote_git_creds', url: 'https://engstash.int.kronos.com/scm/per/neoload.git']]])
                //checkout([$class: 'GitSCM', branches: [[name: '*/${Branch}']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'perf-automation'], [$class: 'CloneOption', depth: 1, noTags: false, honorRefspec: true, reference: 'C:\\\\neoload_reference_repo', shallow: true]], submoduleCfg: [], userRemoteConfigs: [[refspec: '+refs/heads/develop:refs/remotes/origin/develop', credentialsId: 'remote_git_creds', url: 'https://engstash.int.kronos.com/scm/per/perf-automation.git']]])
                checkout([$class: 'GitSCM', branches: [[name: '*/${Branch}']], extensions: [[$class: 'CloneOption', timeout: 900, honorRefspec: true, noTags: false, reference: 'C:\\neoload_reference_repo', shallow: true]], userRemoteConfigs: [[credentialsId: 'remote_git_creds', url: 'https://engstash.int.kronos.com/scm/per/neoload.git']]])
                checkout([$class: 'GitSCM', branches: [[name: '*/${Branch}']], extensions: [[$class: 'CloneOption', timeout: 900, honorRefspec: true, noTags: false, reference: 'C:\\neoload_reference_repo', shallow: true]], userRemoteConfigs: [[credentialsId: 'remote_git_creds', url: 'https://engstash.int.kronos.com/scm/per/perf-automation.git']]])
            }
        }
        stage ('Unzip project to workspace') 
        {
            dir("${workspace}\\neoload") {
                unzip dir: "${Project_Name}", glob: '', zipFile: "${Project_Zip}"
            }       
        }         
    	stage ('Execute Neoload Scenario') {
    	    echo "Number of scenarios: "+scenarios.size()
            scenarios.each{
                echo "Running Scenario: ${it}"
                def scenario = "${it}".trim();
                def scenario_dir = scenario.replaceAll("\\s","");
                try{
                    neoloadRun executable: "${Neoload_Exe}", 
                        project: "${Neoload_Dir}\\${Project_Name}\\${Project_Name}.nlp", 
                        testDescription: "${scenario}", 
                        reportXml: "${WORKSPACE}/reports/${scenario_dir}/${scenario_dir}_report.xml", 
                        reportHtml: "${WORKSPACE}/reports/${scenario_dir}/${scenario_dir}_report.html", 
                        scenario: "${scenario}",
                        testResultName: "${scenario}",
                        sharedLicense: [
                            server: "http://wfd-tc530:8080, User: admin, LicenseId:${NeotysTeamLicense}", 
                            duration: "${Duration}", 
                            vuCount: "${Users}"
                        ]

                }catch (err) {
                    //The Neoload plugin is throwing a harmless error, ignoring until a fix is provided."
                    //echo err.getMessage()
                }
                //run automation jar
                withCredentials([usernamePassword(credentialsId: 'remote_git_creds', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                    sh'''
                    java -jar -Dmail.auth.password=${PASSWORD} ${Automation_Jar_Path}${Automation_Jar_Name}
                    neoload report --type=trends --filter="results=6adba696-a0ce-4e04-b48a-e0d2424ab0d9|4002dcf1-5ae8-433f-b7e4-e04c141cd39a" --template .local/lib/python3.8/site-packages/tests/resources/jinja/trends/transaction_trends.html.j2 &gt; sample_report.html
                    '''
                }
            }
        }
        stage('Zip results directory'){
            dir("${WORKSPACE}") {
                zip zipFile: 'results.zip', archive: false, dir: 'reports'
                archiveArtifacts artifacts: 'results.zip', fingerprint: true
            } 
        }
        //stage("Copy results to master"){
        //    dir("${WORKSPACE}") {
        //        def host_credential_id  = "perf-admin"
        //        withCredentials([usernamePassword(
        //            credentialsId: host_credential_id, 
        //            passwordVariable: 'PASSWORD', 
        //            usernameVariable: 'USERNAME')])
        //        {
    	//            bat '''
        //            pscp -v -pw %PASSWORD% %WORKSPACE%\\results.zip %USERNAME%@'''+jenkins_master+''':/tmp/
    	//            '''
        //        }
        //    }
        //}
        stage('CleanWorkspace') {
            cleanWs()
            dir("${env.WORKSPACE}@tmp") { deleteDir() }
            dir("${env.WORKSPACE}@script") { deleteDir() }
            dir("${env.WORKSPACE}@script@tmp") { deleteDir() }
        }
    }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>