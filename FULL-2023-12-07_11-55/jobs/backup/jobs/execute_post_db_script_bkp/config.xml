<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>15</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@1.46.3">
      <projectNameList>
        <string>*</string>
      </projectNameList>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33.1">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>db_server</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>db_name</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>post_db_script_path</name>
          <description>The relative path to to the pre_test_counts.sql starting from the GetPIntCode project workspace root directory.</description>
          <defaultValue>bin/sqlscript/</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.8">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>timestamps {
    node{ 
        def jar_path = "PIntCode/kronos"
        stage('CleanWorkspace') {
            cleanWs()
            dir("${env.WORKSPACE}@tmp") { deleteDir() }
            dir("${env.WORKSPACE}@script") { deleteDir() }
            dir("${env.WORKSPACE}@script@tmp") { deleteDir() }
        }
        stage ("Copy required files from PIntCode project to workspace "){
            script{
                copyArtifacts filter: "${jar_path}/transposeMetrics.jar", projectName: 'GetPIntCode',selector: lastSuccessful()
                copyArtifacts filter: 'PIntCode/${post_db_script_path}/*.*', projectName: 'GetPIntCode',selector: lastSuccessful()
                copyArtifacts filter: 'PIntCode/bin/util.db_pint.bash', projectName: 'GetPIntCode',selector: lastSuccessful()
            }
        }
        stage('unique'){
            if ("${params.unique}" != 'null')
                {
                    echo "Unique ID copied ${params.unique}"
                    env.unique = "${params.unique}"
                }
            else 
                {
                    env.unique = System.currentTimeMillis()
                    echo "Unique ID new ${env.unique}"
                }
        }
        withCredentials([usernamePassword(credentialsId: 'engperfuser', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
            stage("Execute PreDB SQL"){
                sh '''
                    #!/bin/bash
                    source "${WORKSPACE}"/PIntCode/bin/util.db_pint.bash
                    export CACHEDIR=${WORKSPACE}
                    export db_server="${db_server}"
                    export db_name="${db_name}"
                    export db_username="tkcsowner"
                    export db_password="tkcsowner"
                    export sqlscript_dir="${CACHEDIR}/PIntCode/${post_db_script_path}/"
                    echo "@Main(); $(date +"%T");  Version ${version}; Executing Post DB Script"
                    db_sqlscript_execute
                '''    
            }
            stage("Copy db_count_summary to Workspace"){
                sh '''
                    #!/bin/bash
                    export db_server="${db_server}"
                    sshpass -p $PASSWORD scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r $USERNAME@${db_server}:/tmp/db_count_summary.csv ${WORKSPACE}/sqloutput/ &amp;&gt; /dev/null
                '''
                }
            }  
            	stage ('Transpose Metrics') {
     		// Shell build step
            sh """ 
            #!/bin/bash 
            mkdir -p /usr/local/data/${env.unique}/prepost_dbCount
            cd ${jar_path}
            java -jar transposeMetrics.jar "${WORKSPACE}/sqloutput" 
             cp ${WORKSPACE}/sqloutput/db_count_output.csv /usr/local/data/${env.unique}/prepost_dbCount
              cp ${WORKSPACE}/sqloutput/db_count_output.html /usr/local/data/${env.unique}/prepost_dbCount
             """ 
        	}
        	 stage ('Publish HTML Report') {
            publishHTML([allowMissing: false,  alwaysLinkToLastBuild: false, keepAll: true, reportDir: "/usr/local/data/${env.unique}/prepost_dbCount", reportFiles: 'db_count_output.html', reportName: 'HTML Report', reportTitles: ''])
    	}
    	
        stage ('Archieve'){
    		archiveArtifacts allowEmptyArchive: false, artifacts: 'sqloutput/*.*', caseSensitive: true, defaultExcludes: true, fingerprint: false, onlyIfSuccessful: false 
    	    }
    	stage('CleanWorkspace') {
            cleanWs()
            dir("${env.WORKSPACE}@tmp") { deleteDir() }
            dir("${env.WORKSPACE}@script") { deleteDir() }
            dir("${env.WORKSPACE}@script@tmp") { deleteDir() }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>