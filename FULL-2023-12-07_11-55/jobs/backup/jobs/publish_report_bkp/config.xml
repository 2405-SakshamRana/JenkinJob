<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.33.1">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>unique</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.TextParameterDefinition>
          <name>email_recipients</name>
          <trim>false</trim>
        </hudson.model.TextParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>master_build_no</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.8">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2660.vb_c0412dc4e6d">
    <script>timestamps {
    node () {
        def jar_path = "PIntCode/kronos"
        def server="perfautomation250k"
       
 

        echo "${jar_path}"
        def neoload_report_zipname ="neoload-report.zip"
     	def folder_name
     	
     	stage('CleanWorkspace') {
            cleanWs()
            dir("${env.WORKSPACE}@tmp") { deleteDir() }
            dir("${env.WORKSPACE}@script") { deleteDir() }
            dir("${env.WORKSPACE}@script@tmp") { deleteDir() }
        }  
        
       stage('unique'){
            if ("${params.unique}" != 'null')
                {
                    echo "Unique ID copied ${params.unique}"
                    env.unique = "${params.unique}"
                }
            else 
                {
                    env.unique = System.currentTimeMillis()
                    echo "Unique ID new ${env.unique}"
                }
        }
        
        stage ("Copy Files from PIntCode project"){
            script {
                echo "Copy required jar files."
                copyArtifacts filter: "${jar_path}/publish_report.jar", projectName: 'GetPIntCode',selector: lastSuccessful()
                copyArtifacts filter: "${jar_path}/src/test/resources/**.*", projectName: 'GetPIntCode',selector: lastSuccessful()
            }
        }
        stage ('Build') {
           /* if ("${params.job_name}" == 'test_tulika_Full_Workflow_Perf50k')
                {
                    
                    env.job_name = "test/jobs/test_tulika_Full_Workflow_Perf50k"
                }
            else 
                {
                    env.job_name = "${params.job_name}"
                    
                }*/
            sh """ 
                #!/bin/bash 
                folder_name="${neoload_report_zipname}"
                echo $email_recipients
                echo ${BUILD_NUMBER}
                echo $neoload_report_zipname
                mkdir -p /usr/local/data/${env.unique}/logs/neoload_report/
                cd /var/lib/jenkins/jobs/_Full_Workflow_Perf50k/builds/${params.master_build_no}/archive/
                cp /var/lib/jenkins/jobs/_Full_Workflow_Perf50k/builds/${params.master_build_no}/archive/$neoload_report_zipname /usr/local/data/${env.unique}/logs/neoload_report/
                cd /usr/local/data/${env.unique}/logs/neoload_report/
                
                
                tar -xvf ${neoload_report_zipname}
                echo $folder_name
               # mv $folder_name report
              
             
                 cd /var/lib/jenkins/workspace/publish_report/PIntCode/kronos/

              pwd
                
                java -jar /var/lib/jenkins/workspace/${JOB_NAME}/PIntCode/kronos/publish_report.jar "/usr/local/data/" "${env.unique}" "${params.master_build_no}" "$email_recipients" "${neoload_report_zipname}" "/var/lib/jenkins/workspace/${JOB_NAME}/PIntCode/kronos/src/test/resources/" "$BUILD_NUMBER" "${server}" "${params.cpu_comparison_build_no}" "${params.steady_state_build_no}" "${params.execute_post_db_build_no}"  
                cd /usr/local/data/${env.unique}/nmon_logs/
                mkdir /var/lib/jenkins/jobs/publish_report/builds/${BUILD_NUMBER}/archive/
                cp *.nmon /var/lib/jenkins/jobs/publish_report/builds/${BUILD_NUMBER}/archive/
            """ 
	    }
	     stage ('Publish HTML Report') {
            publishHTML([allowMissing: false,  alwaysLinkToLastBuild: false, keepAll: true, reportDir: "/usr/local/data/${env.unique}/logs/neoload_report//neoload-report/", reportFiles: 'report.html', reportName: 'HTML Report', reportTitles: ''])
    	}
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>