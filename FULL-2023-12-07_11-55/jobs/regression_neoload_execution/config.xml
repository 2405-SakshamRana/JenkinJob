<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1249.v7d974144cc14">
  <actions/>
  <description>Execute NeoLoad test for regression specific tests</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>50</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.34">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>Branch</name>
          <description>Branch to use for checking out project, develop by default. Project is located at repo: https://engstash.int.kronos.com/projects/PER/repos/neoload/browse</description>
          <defaultValue>develop</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Project</name>
          <description>Relative path from the repository root neoload to zip containing the .nlp file.For example, \shift_left\50k_automation</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Scenario</name>
          <description>Name of scenario to be executed, in case of multiple scenarios please input comma separated values.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Users</name>
          <description>If using a shared license, the number of virtual users to lease</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Duration</name>
          <description>If using a shared license, the duration of the lease (how many hours the test will run for)</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Submitter</name>
          <description>firstname.lastname@ukg.com</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>nlp_file</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.9">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2803.v1a_f77ffcc773">
    <script>timestamps 
    {
        node ('pipeline-neoload_controller_new') 
            {  def file_name="neoload-report_${Scenario}_${currentBuild.startTimeInMillis}.zip"
                        
                try
                    {
                        //NTS license can be found by logging into http://wfd-tc530:8080/#!licenses (admin/admin)
                        def NeotysTeamLicense='MCwCFBPKpem5ckDMZqNUmrH/eZQqzXarAhRo62I0Mlj+GmjQR07vhO51DCoiuQ=='
                        def Neoload_Dir = "C:\\Users\\superuser\\Documents\\NeoLoad Projects"
                        def Neoload_Exe="C:\\Program Files\\NeoLoad 7.11\\bin\\NeoLoadCmd.exe"
					    def projectzip = "${env.WORKSPACE}\\NeoLoadCode\\${env.Project}"
				        def Project_Path = "${env.Project}"- ~/\.\w+$/
                        def projectpath = "${env.WORKSPACE}\\NeoLoadCode\\${Project_Path}"
                        def Project_Name1 = "${Project_Path}"- ~/\\\w+/
                        def Project_Name2 = "${Project_Name1}"- ~/\\\w+/   
                        def projectname = "${Project_Name2}".replaceAll("[^a-zA-Z0-9 _]+","")  
                       
                        println("${projectzip}")
                        println("${projectpath}")
                    
                        if("${Scenario}"=="02-Approvals"||"${Scenario}"=="01-IA_EmployeeSummary"||"${Scenario}"=="00_Manager_Submission_Period" )
                            {
                                println("Inside if block")
                                stage('CleanWorkspace') 
                                    {
                                        cleanWs()
                                        dir("${env.WORKSPACE}@tmp") { deleteDir() }
                                        dir("${env.WORKSPACE}@script") { deleteDir() }
                                        dir("${env.WORKSPACE}@script@tmp") { deleteDir() }
                                    }
                                stage ('Copy timekeeping regression script from neoload_code_checkout ')
                                    {
                                        script
                                            {
                                                echo "Copy required timekeeping regression script."
                                                copyArtifacts filter: "NeoLoadCode/${env.Project}", projectName: 'regression_neoload_checkout',selector: lastSuccessful()
                                            }
                                    }
                                stage ('Unzip project') 
                                    {
                                        dir("${workspace}") 
                                            {
                                                unzip dir: "${projectpath}", glob: '', zipFile: "${projectzip}"
                                            }  
                                    }
                            }
                    
                        stage ('Execute Neoload Scenario') 
                            {
                                
 	     			            long start=currentBuild.startTimeInMillis/1000
                                sh """
                                    echo "start_TimeStamp= ${start}" &gt; env.props
                                """
                	            prop = readProperties file:'env.props'
                                    prop.each{key, value -&gt;
                                    env[key] = value
                                    }
                                //println ${env.currentDate}
                                //println "current time value is ${env.currentDate}"
                        
                                echo "server info: http://wfd-tc530.int.kronos.com:8080, User: admin, LicenseId:${NeotysTeamLicense}"
                                bat """echo "${Neoload_Exe}" """
                               // bat "tar.exe -a -cf '${file}' neoload-report/*"
							    bat """ "${Neoload_Exe}" -project "${projectpath}\\%nlp_file%" -launch "%Scenario%" -testResultName "$Date{hh:mm - dd MMM yyyy} (build 670)" -description "regressionprojectregression_api_test2 (build 670)" -NTS http://wfd-tc530.int.kronos.com:8080 -NTSLogin admin:2oRsKlNRrbY2LHHH/Qrj9g== -leaseLicense MCwCFBPKpem5ckDMZqNUmrH/eZQqzXarAhRo62I0Mlj+GmjQR07vhO51DCoiuQ==:10:1 -report C:\\jenkins\\workspace\\regression_neoload_execution/neoload-report/report.html,C:\\jenkins\\workspace\\regression_neoload_execution/neoload-report/report.xml -SLAJUnitResults C:\\jenkins\\workspace\\regression_neoload_execution/neoload-report/junit-sla-results.xml -noGUI"""
                            }
                               
		                
                    }
                finally 
                    {
                        println(currentBuild.startTimeInMillis/1000)
                                println(currentBuild.duration/1000)
                	            long start=currentBuild.startTimeInMillis/1000
                	            int dur=currentBuild.duration/1000
                	            endTime=start+dur
                	            
                	            sh """
                                    echo "endTime = ${endTime}" &gt; env.props
                                """
                                prop = readProperties file:'env.props'
                                    prop.each{key, value -&gt;
                                    env[key] = value
                                    }
                       
                                println "endTime from env file :${env.endTime}"
                         zip dir: "neoload-report", glob: '', zipFile: "${file_name}"
                        archiveArtifacts artifacts: 'neoload-report_*.zip', followSymlinks: false 
                    }
            }
    }</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>