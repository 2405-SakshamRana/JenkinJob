<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1249.v7d974144cc14">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>N</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    <org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction plugin="workflow-multibranch@716.vc692a_e52371b_">
      <jobPropertyDescriptors>
        <string>hudson.model.ParametersDefinitionProperty</string>
        <string>jenkins.model.BuildDiscarderProperty</string>
      </jobPropertyDescriptors>
    </org.jenkinsci.plugins.workflow.multibranch.JobPropertyTrackerAction>
  </actions>
  <description>This job requires existing ACD HA WFM. Only ACD is supported.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.34">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.9">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>50</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <jenkins.plugins.parameter__separator.ParameterSeparatorDefinition plugin="parameter-separator@1.3">
          <name>deploy_wfm_1</name>
          <separatorStyle>border-width: 0</separatorStyle>
          <sectionHeader>Provide below details to deploy new WFM</sectionHeader>
          <sectionHeaderStyle>
				background-color: #dbdb8e;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
			</sectionHeaderStyle>
        </jenkins.plugins.parameter__separator.ParameterSeparatorDefinition>
        <hudson.model.StringParameterDefinition>
          <name>release</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>cluster_id</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>db_server</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>db_name</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>destroy_wfm</name>
          <description>Check this if you want to destroy the existing wfm.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>wfc_stream</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>web_stream</name>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>environment_name</name>
          <choices>
            <string>PRF - Performance</string>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>unique_tag</name>
          <description>Unique tag to identify the WFMs in a particular environment. For Performnace Shift Left, unique tag will be "perf_SL". For Performnace Core, unique tag will be "perf_Core". For Performnace 500K, unique tag will be "perf_500K".</description>
          <defaultValue>perf_SL</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>extra_inputs</name>
          <description>JSON for other CAT deployment parameters not specified in this job. Format is {"input_param1": "input_value1", "input_param2": "input_value2"} Where input_value1 is the CAT input parameter name without the leasing param_ The CAT input parameter param_environment would become just "environment" in the JSON Be sure to use double quotes (") and not single quotes (') Example 1For all the performance environemnt , the value will be false.: {"cloud":"Google", "udm_url": "Location Default", "stack": "Engineering", "ums_host": "Location Default", "sdm_host": "Location Default"} Exmaple 2: {"instace_id":"11","sa_back_num":"1","sa_bgp_num":"1","sa_front_num":"1","sa_api_num":"1"}</description>
          <defaultValue>{"sa_back_num":"1","sa_bgp_num":"1","sa_front_num":"1","sa_api_num":"1"}</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <jenkins.plugins.parameter__separator.ParameterSeparatorDefinition plugin="parameter-separator@1.3">
          <name>neload_test_details</name>
          <separatorStyle>border-width: 0</separatorStyle>
          <sectionHeader>ACD HA WFM details.</sectionHeader>
          <sectionHeaderStyle>
				background-color: #dbdb8e;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
			</sectionHeaderStyle>
        </jenkins.plugins.parameter__separator.ParameterSeparatorDefinition>
        <hudson.model.StringParameterDefinition>
          <name>branch</name>
          <description>Bitbucket branch of project https://engstash.int.kronos.com/projects/PER/repos/neoload where all the scripts are located. All the code and all the Neoload scripts should be in the same branch</description>
          <defaultValue>develop</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>submitter</name>
          <description>As firstname.lastname@kronos.com</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>nmon_iteration</name>
          <description>Can not be empty</description>
          <defaultValue>5</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>nmon_interval</name>
          <description>Can not be empty</description>
          <defaultValue>890</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <jenkins.plugins.parameter__separator.ParameterSeparatorDefinition plugin="parameter-separator@1.3">
          <name>warm_up_script_details</name>
          <separatorStyle>border-width: 0</separatorStyle>
          <sectionHeader>Details of Warm Up Neoload script, leave these empty to skip.</sectionHeader>
          <sectionHeaderStyle>
				background-color: #dbdb8e;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
			</sectionHeaderStyle>
        </jenkins.plugins.parameter__separator.ParameterSeparatorDefinition>
        <hudson.model.StringParameterDefinition>
          <name>warmup_project_path</name>
          <description>Path of a zip file containing .nlp file, relative to the workspace. Bitbucket branch of project https://engstash.int.kronos.com/projects/PER/repos/neoload where warmup scripts are located.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>warmup_scenario</name>
          <description>Name of warmup scenario in the project, in case of multiple scenarios please input comma separated values.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>warmup_users_count</name>
          <description>User count for license</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>warmup_duration</name>
          <description>If using a shared license, the duration of the lease</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <jenkins.plugins.parameter__separator.ParameterSeparatorDefinition plugin="parameter-separator@1.3">
          <name>database_script_details</name>
          <separatorStyle>border-width: 0</separatorStyle>
          <sectionHeader>Details of Database script, leave these empty to skip.</sectionHeader>
          <sectionHeaderStyle>
				background-color: #dbdb8e;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
			</sectionHeaderStyle>
        </jenkins.plugins.parameter__separator.ParameterSeparatorDefinition>
        <hudson.model.StringParameterDefinition>
          <name>pre_db_script_path</name>
          <description>Path relative "performance/bin" directory</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>post_db_script_path</name>
          <description>Path relative "performance/bin" directory</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <jenkins.plugins.parameter__separator.ParameterSeparatorDefinition plugin="parameter-separator@1.3">
          <name>test_details</name>
          <separatorStyle>border-width: 0</separatorStyle>
          <sectionHeader>Details of Main 50K Test. Leave these empty to skip</sectionHeader>
          <sectionHeaderStyle>
				background-color: #dbdb8e;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
			</sectionHeaderStyle>
        </jenkins.plugins.parameter__separator.ParameterSeparatorDefinition>
        <hudson.model.StringParameterDefinition>
          <name>test_project_path</name>
          <description>Provide the path of the zip file which contains the .nlp file, relative to the Git Repository</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>test_scenario</name>
          <description>Provide the Scenario Name which needs to be executed, in case of multiple scenarios, input comma-separated values.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>test_users_count</name>
          <description>Provide the number of users for which the license needs to be leased.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>test_duration</name>
          <description>Provide the duration for which the license needs to be leased.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <jenkins.plugins.parameter__separator.ParameterSeparatorDefinition plugin="parameter-separator@1.3">
          <name>revert_details</name>
          <separatorStyle>border-width: 0</separatorStyle>
          <sectionHeader>Details of 50k Revert Test Script. Leave these empty to skip</sectionHeader>
          <sectionHeaderStyle>
				background-color: #dbdb8e;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
			</sectionHeaderStyle>
        </jenkins.plugins.parameter__separator.ParameterSeparatorDefinition>
        <hudson.model.StringParameterDefinition>
          <name>revert_project_path</name>
          <description>Provide the path of the zip file which contains the .nlp file, relative to the Git Repository</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>revert_scenario</name>
          <description>Provide the Scenario Name which needs to be executed, in case of multiple scenarios, input comma-separated values.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>revert_users_count</name>
          <description>Provide the number of users for which the license needs to be leased.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>revert_duration</name>
          <description>Provide the duration for which the license needs to be leased.</description>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2803.v1a_f77ffcc773">
    <script>// Define the Unique ID
def uniq_id = System.currentTimeMillis()
env.uniq_id = uniq_id

// Stage 1:- Stage to Clean the Workspace
def add_stage_clean_workspace() {
	stage('CleanWorkspace') {
        cleanWs()
        dir("${env.WORKSPACE}@tmp") { deleteDir() }
        dir("${env.WORKSPACE}@script") { deleteDir() }
        dir("${env.WORKSPACE}@script@tmp") { deleteDir() }
	}
}

// Stage 2:- Stage to download the PIntCode
def add_stage_getCode(){
    stage('Call PIntCode Job') {
	    def getcode_build = build(job: 'GetPIntCode', parameters: [])
		//copyArtifacts(projectName: 'GetPIntCode', selector: specific("${getcode_build.number}"))		
    }
}

// Stage 3:- Stage to deploy New WFM 
def add_stage_deploy_new_wfm(){	
    stage('Deploy WFM') {
        def submitters = "${params.submitter}"
        println submitters
        def firstSubmitter = submitters.tokenize(",")[0]
        println firstSubmitter
        
		def build_result = build(job: 'WFM_Deploy_Perf_ACD', 
		parameters: [string(name: 'RELEASE', value: "${params.release}"),
		string(name: 'WFC_STREAM', value: "${params.wfc_stream}"),
		string(name: 'WEB_STREAM', value: "${params.web_stream}"),
		string(name: 'ENVIRONMENT_NAME', value: "${params.environment_name}"),
		string(name: 'WFM_DEPLOYMENT_INFO', value: """
		[
          {
            "INDEX": "1",
            "CLUSTER_ID": "perf_${params.cluster_id}",
            "DB_SERVER": "${params.db_server}",
            "DB_SID": "${params.db_name}"
          }
        ]
		"""),
		string(name: 'OWNER', value: "${firstSubmitter}"),
		string(name: 'UNIQUE_TAG', value: "${params.unique_tag}"),
		string(name: 'EXTRA_INPUTS', value: "${params.extra_inputs}"),
		string(name: 'DESTROY_WFM', value: "${params.destroy_wfm}")
		])
	    if(!build_result.getBuildVariables().get('EXECUTION_NAME_1'))
			throw new Exception("EXECUTION_NAME_1 is not found!")
		else {
			execution_name = build_result.getBuildVariables().get('EXECUTION_NAME_1')
			println "deployment name: " + execution_name
		}
		copyArtifacts(projectName: 'WFM_Deploy_Perf_ACD', selector: specific("${build_result.number}"))	
	} 
}

// Stage 4:- Fetch the WFM Information from the Rightscale 
def add_stage_fetch_wfm_details(def String execution_name) {
	stage('Fetch WFM Details') { 
        def build_result = build(job: 'Fetch_deployment_Details', parameters: [string(name: 'EXECUTION_NAME', value: execution_name)])
        println "${build_result.number}"
		env.fnt = build_result.getBuildVariables().get('fnt')
		env.bck = build_result.getBuildVariables().get('bck')
		env.api = build_result.getBuildVariables().get('api')
		env.bgp = build_result.getBuildVariables().get('bgp')
		env.db_server = build_result.getBuildVariables().get('param_dbserver')
		env.db_name = build_result.getBuildVariables().get('param_dbname')
		println env.fnt + "," + env.bck + "," + env.api + "," + env.bgp + "," + env.db_server + "," + env.db_name
		if (!fnt || !bck || !api || !bgp || !db_server || !db_name)
			throw new Exception("fnt/bgp/api/bck/param_dbserver could not be found!")
		copyArtifacts(projectName: 'Fetch_deployment_Details', selector: specific("${build_result.number}"))
	}
}

// Stage 5:- Add engperfuser to all the wfm
def add_stage_create_users_wfm() {
	stage("Create users on WFM nodes") {
		def wfm_nodes = []
		wfm_nodes += env.fnt
		wfm_nodes += env.bck
		wfm_nodes += env.api
		wfm_nodes += env.bgp
		wfm_nodes += env.db_server
		println "wfm_nodes: " + wfm_nodes.toString()
        script {
          def allJobs = [:]
          for(def curJob=0; curJob&lt;wfm_nodes.size(); curJob++) {
			def jobName = wfm_nodes[curJob]
            allJobs[jobName] =  {
			  stage(jobName) {
				build (job: "create_default_users",
                    parameters:
                    [string(name: 'PROJECT', value: "gce_automation_cd"), string(name: 'SERVER_NAME', value: jobName)])
			}
            }
          }
          parallel(allJobs)
        }   
    }
}

// Stage 6:- Find all the servers which are used in the tests executions
def add_stage_find_allservers() {
	def allservers
	stage('find_allservers') {
		println "backend: ${env.bck}, frontend: ${env.fnt}, api_node: ${env.api}, bgp_node: ${env.bgp}, db_server: ${env.db_server}"
		def build_result = build(job: 'find_allservers', parameters: [string(name: 'backend', value: env.bck),
		string(name: 'frontend', value: env.fnt),string(name: 'api_node', value: env.api),string(name: 'bgp_node', value: env.bgp),string(name: 'db_server', value: env.db_server)])
        println "${build_result.number}"
	    if(!build_result.getBuildVariables().get('allservers'))
			throw new Exception("allservers is not found!")
		else
			println build_result.getBuildVariables().get('allservers')
		
		allservers = build_result.getBuildVariables().get('allservers').split(',')
	}
	return allservers
}

// Stage 7:- Add engperfuser to all the servers which are fetched in previous steps
def add_stage_create_users(def allservers) {
	stage("Create users") {
        script {
          def allJobs = [:]
          for(def curJob=0; curJob&lt;allservers.size(); curJob++) {
            //def jobName = "JOB-" + curJob
			def jobName = allservers[curJob]
            allJobs[jobName] =  {
			  stage(jobName) {
				build (job: "create_default_users",
                    parameters:
                    [string(name: 'PROJECT', value: "gce_automation_cd"), string(name: 'SERVER_NAME', value: jobName)])
			}
            }
          }
          parallel(allJobs)
        }   
    }
}

// Stage 8:- Perform the backend and bgp nodes configuration.
def add_stage_wfm_backend_configuration() {
	stage('wfm_backend_configuration') {
		build(job: 'wfm_backend_configuration', parameters: [
		string(name: 'backend_nodes', value: "${env.bck}"),
		string(name: 'bgp_nodes', value: "${env.bgp},${env.api}")
		])
	}
}

// Stage 9:- Clear the Redis Cache and start the wfm
def add_stage_clear_redis_cache() {
	stage('Clear Redis Cache') {
		def clear_redis_cache_build = build(job: 'clear_redis_cache', parameters: [
		string(name: 'backend_nodes', value: "${env.bck}"),
		string(name: 'bgp_nodes', value: "${env.bgp},${env.api}")
		])
		//copyArtifacts(projectName: 'clear_redis_cache', selector: specific("${clear_redis_cache_build.number}"))		
	}
}

// Stage 10:- Check the health of all the servers and install the nmon.
def add_stage_health_check() {
	stage('server_health_check') {
		 server_health_check_build = build(job: 'server_health_check',
		parameters: [string(name: 'nmon_interval', value: "${params.nmon_interval}"),
		string(name: 'nmon_iteration', value: "${params.nmon_iteration}"),
		string(name: 'servers_fqdn', value: "${env.fnt},${env.bck},${env.api},${env.bgp},${env.nsq},${env.dmc},${env.dmq},${env.ins_dmq},${env.db_server}"),
		string(name: 'unique', value: "${env.uniq_id}"),
		string(name: 'email_recipients', value: "${params.submitter}")
		])
		//copyArtifacts(projectName: 'server_health_check', selector: specific("${server_health_check_build.number}"))		
	}
}

// Stage 11:- Start the warmup tests.
def add_stage_warmup_test() {
	stage('Warm-up test') {
		def neoload_build = build(job: 'NeoLoad_Execution',
		parameters: [string(name: 'Branch', value: "${params.branch}"),
		string(name: 'Project', value: "${params.warmup_project_path}"),
		string(name: 'Scenario', value: "${params.warmup_scenario}"),
		string(name: 'Users', value: "${params.warmup_users_count}"),
		string(name: 'Duration', value: "${params.warmup_duration}"),
		string(name: 'Submitter', value: "${params.submitter}")
		])
		copyArtifacts(projectName: 'NeoLoad_Execution', selector: specific("${neoload_build.number}"))		
	}
}

//Stage 12:- Execute the Pre Database Script
def add_stage_pre_db_script() {
	stage('Pre-DB Script') {
		def pre_db = build(job: 'execute_pre_db_script',
		parameters: [string(name: 'pre_db_script_path', value: "${params.pre_db_script_path}"),
		string(name: 'db_server', value: "${env.db_server}"),
		string(name: 'db_name', value: "${params.db_name}")
		])
		//copyArtifacts(projectName: 'execute_pre_db_script', selector: specific("${pre_db.number}"))		
	}
}

// Stage 13:- Start the Neoload Main tests.
def add_stage_neoload_test() {
	stage('Execute Neoload Test') {
		def neoload = build(job: 'NeoLoad_Execution',
		parameters: [string(name: 'Branch', value: "${params.branch}"),
		string(name: 'Project', value: "${params.test_project_path}"),
		string(name: 'Scenario', value: "${params.test_scenario}"),
		string(name: 'Users', value: "${params.test_users_count}"),
		string(name: 'Duration', value: "${params.test_duration}"),
		string(name: 'Submitter', value: "${params.submitter}")
		])
		env.CURRENT_TIME = neoload.getBuildVariables().get('currentDate')
											  
		copyArtifacts(projectName: 'NeoLoad_Execution', selector: specific("${neoload.number}"))		
	}
}

// Stage 14:- Execute the Post Database Script
def add_stage_post_db_script() {
	stage('Post-DB Script') {
		 build_result14 = build(job: 'execute_post_db_script',
		parameters: [string(name: 'post_db_script_path', value: "${params.post_db_script_path}"),
		string(name: 'unique', value: "${env.uniq_id}"),
		string(name: 'db_server', value: "${env.db_server}"),
		string(name: 'db_name', value: "${params.db_name}")
		])
		//copyArtifacts(projectName: 'execute_post_db_script', selector: specific("${build_result14.number}"))			
	}
}

// Stage 15:- Extract the Steady State CPU
def add_stage_steady_state_cpu() {
	stage('nmon_extract_cpu_steady_state') {
	def steady_state_duration="00:60"
	def ramup_time="00:20"
	def neoload_startup_time="00:0.5"
	    build_result15 = build(job: 'nmon_extract_cpu_steady_state',
		parameters: [
		string(name: 'unique', value: "${env.uniq_id}"),
		string(name: 'neoload_startup_time', value: "${neoload_startup_time}"),
		string(name: 'ramup_time', value: "${ramup_time}"),
		string(name: 'steady_state_duration', value: "${steady_state_duration}"),
		string(name: 'job_start_time', value: "${env.CURRENT_TIME}"),
		string(name: 'email_recipients', value: "${params.submitter}")
		])
		//copyArtifacts(projectName: 'nmon_extract_cpu_steady_state', selector: specific("${build_result15.number}"))		
	}
}

// Stage 16:- Parse the DB Count (TBD)

// Stage 17:- Collect the NMON and parse it
def add_stage_nmon_collection_and_parse() {
	stage('nmon_collection_and_parse') {
	build_result17 = build(job: 'nmon_collection_and_parse',
		parameters: [
		string(name: 'servers_fqdn', value: "${env.fnt},${env.bck},${env.api},${env.bgp},${env.nsq},${env.dmc},${env.dmq},${env.ins_dmq},${env.db_server}"),
		string(name: 'unique', value: "${env.uniq_id}"),
		string(name: 'email_recipients', value: "${params.submitter}")
		])
		//copyArtifacts(projectName: 'nmon_collection_and_parse', selector: specific("${build_result17.number}"))		
	}
}

// Stage 18:- Download the logs
def add_stage_download_logs() {
	stage('Download_Logs') {
		build_result18 = build(job: 'Download_Logs',
		parameters: [
		string(name: 'servers_fqdn', value: "${env.fnt},${env.bck},${env.api},${env.bgp},${env.nsq},${env.dmc},${env.dmq},${env.ins_dmq},${env.db_server}"),		
		string(name: 'unique', value: "${env.uniq_id}"),
		string(name: 'email_recipients', value: "${params.submitter}")
		])
		//copyArtifacts(projectName: 'Download_Logs', selector: specific("${build_result18.number}"))		
	}
}

// Stage 19:- CPU Comparison against baseline
def add_stage_baseline_cpu_comparison() {
	stage('cpu_comparison_with_baseline') {
	     build_result19 = build(job: 'cpu_comparison_with_baseline',
	    parameters: [string(name: 'unique', value: "${env.uniq_id}"),
	    string(name: 'email_recipients',value: "${params.submitter}")
        ])
		//copyArtifacts(projectName: 'cpu_comparison_with_baseline', selector: specific("${build_result19.number}"))		
    }
}

// Stage 20:- Execute the Revert Script
def add_stage_revert_test() {
	stage('execute_neoload_revert_tests') {
		def neoload = build(job: 'NeoLoad_Execution',
		parameters: [string(name: 'Branch', value: "${params.branch}"),
		string(name: 'Project', value: "${params.revert_project_path}"),
		string(name: 'Scenario', value: "${params.revert_scenario}"),
		string(name: 'Users', value: "${params.revert_users_count}"),
		string(name: 'Duration', value: "${params.revert_duration}"),
		string(name: 'Submitter', value: "${params.submitter}")
		])
		//copyArtifacts(projectName: 'NeoLoad_Execution', selector: specific("${neoload.number}"))		
	}
}

// Stage 21:- Publish the 50K Report
def add_stage_publish_report() {
	stage('publish_report') {
										   
																	
																
																	  
		def build_result21 = build(job: 'publish_report',
		parameters: [string(name: 'master_build_no', value: "${env.BUILD_NUMBER}"),
		string(name: 'unique', value: "${env.uniq_id}"),
		string(name: 'email_recipients', value: "${params.submitter}"),
		string(name:'server_health_check_build_no',value:"${server_health_check_build.number}"), 
		string(name: 'cpu_comparison_build_no', value:"${build_result19.number}"),
		string(name: 'steady_state_build_no', value:"${build_result15.number}"),
		string(name: 'execute_post_db_build_no', value:"${build_result14.number}")
		])
		//copyArtifacts(projectName: 'publish_report', selector: specific("${build_result21.number}"))		
	}
}

// Main Method starts here
node { 
    label 'master || linux_node'
	properties([
		buildDiscarder(logRotator(numToKeepStr: '50')),
		parameters([
		separator(name: "deploy_wfm_1", sectionHeader: "Provide below details to deploy new WFM",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #dbdb8e;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
			"""
		),
		string(name: 'release', defaultValue: '', description: ''),
		string(name: 'cluster_id', defaultValue: '', description: ''),
		string(name: 'db_server', defaultValue: '', description: ''),
		string(name: 'db_name', defaultValue: '', description: ''),
		booleanParam(name: 'destroy_wfm', defaultValue: false, description: 'Check this if you want to destroy the existing wfm.'),
		string(name: 'wfc_stream', defaultValue: '', description: ''),
		string(name: 'web_stream', defaultValue: '', description: ''),
		choice(name: 'environment_name', choices: ['PRF - Performance']),
		string(name: 'unique_tag', defaultValue: 'perf_SL', description: 'Unique tag to identify the WFMs in a particular environment. For Performnace Shift Left, unique tag will be "perf_SL". For Performnace Core, unique tag will be "perf_Core". For Performnace 500K, unique tag will be "perf_500K".'),
		string(name: 'extra_inputs', defaultValue: '''{"sa_back_num":"1","sa_bgp_num":"1","sa_front_num":"1","sa_api_num":"1"}''', description: '''JSON for other CAT deployment parameters not specified in this job. Format is {"input_param1": "input_value1", "input_param2": "input_value2"} Where input_value1 is the CAT input parameter name without the leasing param_ The CAT input parameter param_environment would become just "environment" in the JSON Be sure to use double quotes (") and not single quotes (') Example 1For all the performance environemnt , the value will be false.: {"cloud":"Google", "udm_url": "Location Default", "stack": "Engineering", "ums_host": "Location Default", "sdm_host": "Location Default"} Exmaple 2: {"instace_id":"11","sa_back_num":"1","sa_bgp_num":"1","sa_front_num":"1","sa_api_num":"1"}'''),
		
		
		separator(name: "neload_test_details", sectionHeader: "ACD HA WFM details.",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #dbdb8e;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
			"""
		),
		//string(name: 'spark_nodes', defaultValue: 'kacd02-prf05-ins01-wfm05-scc-rcc-60152-1.int.acd.mykronos.com     kacd02-prf05-ins01-wfm05-scc-rcc-60152-2.int.acd.mykronos.com kacd02-prf05-ins01-wfm05-scc-rcc-60152-3.int.acd.mykronos.com', description: 'TAB separated values'),
		//string(name: 'batch_nodes', defaultValue: 'kacd02-prf05-ins01-wfm05-scc-bcc-64910-1.int.acd.mykronos.com     kacd02-prf05-ins01-wfm05-scc-bcc-64910-2.int.acd.mykronos.com kacd02-prf05-ins01-wfm05-scc-bcc-64910-3.int.acd.mykronos.com', description: 'TAB separated values'),
		string(name: 'branch', defaultValue: 'develop', description: 'Bitbucket branch of project https://engstash.int.kronos.com/projects/PER/repos/neoload where all the scripts are located. All the code and all the Neoload scripts should be in the same branch'),
		string(name: 'submitter', defaultValue: '', description: 'As firstname.lastname@kronos.com'),
		string(name: 'nmon_iteration', defaultValue: '5', description: 'Can not be empty'),
		string(name: 'nmon_interval', defaultValue: '890', description: 'Can not be empty'),
		separator(name: "warm_up_script_details", sectionHeader: "Details of Warm Up Neoload script, leave these empty to skip.",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #dbdb8e;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
			"""
		),
		string(name: 'warmup_project_path', defaultValue: '', description: 'Path of a zip file containing .nlp file, relative to the workspace. Bitbucket branch of project https://engstash.int.kronos.com/projects/PER/repos/neoload where warmup scripts are located.'),
		string(name: 'warmup_scenario', defaultValue: '', description: 'Name of warmup scenario in the project, in case of multiple scenarios please input comma separated values.'),
		string(name: 'warmup_users_count', defaultValue: '', description: 'User count for license'),
		string(name: 'warmup_duration', defaultValue: '', description: 'If using a shared license, the duration of the lease'),
		separator(name: "database_script_details", sectionHeader: "Details of Database script, leave these empty to skip.",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #dbdb8e;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
			"""
		),
		string(name: 'pre_db_script_path', defaultValue: '', description: 'Path relative "performance/bin" directory'),
		string(name: 'post_db_script_path', defaultValue: '', description: 'Path relative "performance/bin" directory'),
		separator(name: "test_details", sectionHeader: "Details of Main 50K Test. Leave these empty to skip",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #dbdb8e;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
			"""
		),
		string(name: 'test_project_path', defaultValue: '', description: 'Provide the path of the zip file which contains the .nlp file, relative to the Git Repository'),
		string(name: 'test_scenario', defaultValue: '', description: 'Provide the Scenario Name which needs to be executed, in case of multiple scenarios, input comma-separated values.'),
		string(name: 'test_users_count', defaultValue: '', description: 'Provide the number of users for which the license needs to be leased.'),
		string(name: 'test_duration', defaultValue: '', description: 'Provide the duration for which the license needs to be leased.'),
		separator(name: "revert_details", sectionHeader: "Details of 50k Revert Test Script. Leave these empty to skip",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #dbdb8e;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
			"""
		),
		string(name: 'revert_project_path', defaultValue: '', description: 'Provide the path of the zip file which contains the .nlp file, relative to the Git Repository'),
		string(name: 'revert_scenario', defaultValue: '', description: 'Provide the Scenario Name which needs to be executed, in case of multiple scenarios, input comma-separated values.'),
		string(name: 'revert_users_count', defaultValue: '', description: 'Provide the number of users for which the license needs to be leased.'),
		string(name: 'revert_duration', defaultValue: '', description: 'Provide the duration for which the license needs to be leased.'),
	])])  
	
def allservers
def fnt = []
def bck = []
def api = []
def bgp = []
def nsq = []
def dmc = []
def dmq = []
def ins_dmq = []
def db = []
def db_server
def db_name
//def spark = []
//def batch = []
def execution_name
	timestamps {
    // some block


}
//MAIN execution
	
//	if(params.simulation.isEmpty() || params.submitter.isEmpty())
//		throw new Exception("simulation and submitter can not be left empty.")

// Clean the Workspace
	add_stage_clean_workspace()

// Download the PInt Code
    //add_stage_getCode();

// Deploy WFM
/*	stage('Deploy WFM') {
	    def submitters = "${params.submitter}"
        println submitters
        def firstSubmitter = submitters.tokenize(",")[0]
        println firstSubmitter
        
		def build_result = build(job: 'WFM_Deploy_Perf_ACD', 
		parameters: [string(name: 'RELEASE', value: "${params.release}"),
		string(name: 'WFC_STREAM', value: "${params.wfc_stream}"),
		string(name: 'WEB_STREAM', value: "${params.web_stream}"),
		string(name: 'ENVIRONMENT_NAME', value: "${params.environment_name}"),
		string(name: 'WFM_DEPLOYMENT_INFO', value: """
		[
  {
    "INDEX": "1",
    "CLUSTER_ID": "perf_${params.cluster_id}",
    "DB_SERVER": "${params.db_server}",
    "DB_SID": "${params.db_name}"
  }
]
		"""),
		string(name: 'OWNER', value: "${firstSubmitter}"),
		string(name: 'UNIQUE_TAG', value: "${params.unique_tag}"),
		string(name: 'EXTRA_INPUTS', value: "${params.extra_inputs}"),
		string(name: 'DESTROY_WFM', value: "${params.destroy_wfm}")
		])
	    if(!build_result.getBuildVariables().get('EXECUTION_NAME_1'))
			throw new Exception("EXECUTION_NAME_1 is not found!")
		else {
			execution_name = build_result.getBuildVariables().get('EXECUTION_NAME_1')
			println "deployment name: " + execution_name
		}
		copyArtifacts(projectName: 'WFM_Deploy_Perf_ACD', selector: specific("${build_result.number}"))				
	} */

	execution_name = "WFM_HA_PIPELINE [wfm_50] [ins_50] [perf_SL]"
	
// Fetch the WFM Details
    add_stage_fetch_wfm_details(execution_name)
   
	fnt += env.fnt
	bck += env.bck
	api += env.api
	bgp += env.bgp
	db_server = env.db_server
	db_name = env.db_name
	//echo "front:"+fnt+"\nback:"+bck+"\napi:"+api+"\nbgp:"+bgp+"\ndb_server:"+db_server+"\ndb_name:"+db_name

// Create engperfuser based on the above details
//	add_stage_create_users_wfm()

// Find all the servers and add to the list 
	allservers = add_stage_find_allservers()
	
//	if(params.spark_nodes != null &amp;&amp; params.spark_nodes != "") {
//		spark = params.spark_nodes.trim().replaceAll('[\\s]+', ' ').split()
//		allservers += spark
//	}
//	if(params.batch_nodes != null &amp;&amp; params.batch_nodes != "") {
//		batch = params.batch_nodes.trim().replaceAll('[\\s]+', ' ').split()
//		allservers += batch
//	}
//	println "spark_nodes: ${spark.toString()}\n batch_nodes: ${batch.toString()}"
	//WFM nodes are duplicated in the list
	allservers = allservers.toList().toSet().toList()
	println "after removing duplicates: " + allservers
	allservers.each {
		//if (it.contains('-fnt-')) fnt += it
		//else if (it.contains('-bck-')) bck += it
		//else if(it.contains('-bgp-')) bgp += it
		//else if (it.contains('-api-')) api += it
		if (it.contains('-dbs-')) db += it
		else if (it.contains('-dmc-')) dmc += it
		else if (it.contains('-nsq-')) nsq += it
		else if (it.matches(".*?-ins[\\d]+-dmq.*?")) ins_dmq += it
		else if (!it.matches(".*?-ins[\\d]+-dmq.*?") &amp;&amp; it.contains("dmq")) dmq += it
	} 
	
	println "fnt: ${fnt.toString()}\n bck: ${bck.toString()}\n bgp: ${bgp.toString()}\n api: ${api.toString()}\n db:${db.toString()}\n"
	println "dmc: ${dmc.toString()}\n nsq: ${nsq.toString()}\n dmq: ${dmq.toString()}\n ins_dmq: ${ins_dmq.toString()}\n"
	if(!fnt || !bck || !bgp || !api || !db || !dmc || !nsq || !ins_dmq || !dmq || !db_server || !db_name)
			//throw new Exception("None of the values can be empty!!")
	env.dmc = dmc.join(',')
	env.nsq = nsq.join(',')
	env.ins_dmq = ins_dmq.join(',')
	env.dmq = dmq.join(',')

// Finally add engperfuser to all the deployments
	//add_stage_create_users(allservers)

// Configure the wfm backend configurations
//	add_stage_wfm_backend_configuration()

// Clear the Redis cache and start the WFM
//	add_stage_clear_redis_cache()

// Perform HealthCheck and install the NMON
	//add_stage_health_check()

// Start the Warmup Job.
	if(params.branch &amp;&amp; params.warmup_project_path &amp;&amp; params.warmup_scenario &amp;&amp; params.warmup_users_count &amp;&amp; params.warmup_duration &amp;&amp; params.submitter) {
		add_stage_warmup_test()
	}

// Run the pre database script
	if(params.pre_db_script_path) {
		add_stage_pre_db_script()
	}

// Run the Main tests
	if(params.branch &amp;&amp; params.test_project_path &amp;&amp; params.test_scenario &amp;&amp; params.test_users_count &amp;&amp; params.test_duration &amp;&amp; params.submitter) {
		add_stage_neoload_test()
	}

  
//Run the post database script 
	if(params.post_db_script_path) {
		add_stage_post_db_script()
	}

// Publish the Artifacts
	stage('Publish Artifacts') {
        archiveArtifacts artifacts: '**/*', onlyIfSuccessful: true
    }

// Collect the NMON Data and parse the nmon data
	add_stage_nmon_collection_and_parse()
	
// Collect steady state NMON Data
	add_stage_steady_state_cpu()

// Download the logs 
	add_stage_download_logs()

//Compare with baseline
    add_stage_baseline_cpu_comparison()

// Run the Revert Tests Script
	if(params.branch &amp;&amp; params.revert_project_path &amp;&amp; params.revert_scenario &amp;&amp; params.revert_users_count &amp;&amp; params.revert_duration &amp;&amp; params.submitter) {
		add_stage_revert_test()
	}

// Publish the 50K Report
	add_stage_publish_report()
	
// Clean the Workspace
	add_stage_clean_workspace()

}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>