<?xml version="1.1" encoding="UTF-8" standalone="no"?><flow-definition plugin="workflow-job@1249.v7d974144cc14">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>zone_id</string>
        <string>api_url</string>
        <string>token</string>
      </parameters>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.34">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>token</name>
          <description>Neoload Web Token</description>
          <defaultValue>pptQrX23TOS7WXE0ZvzSo09g</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>api_url</name>
          <description>NeoLoad Web Api Url</description>
          <defaultValue>http://neoload-web.int.acd.mykronos.com/</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>zone_id</name>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>dynamic_zone</string>
              <string>Regression Zone</string>
              <string>Default zone</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Workspace_Name</name>
          <description>Provide the name of the workspace where your project resides</description>
          <defaultValue>poc</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Project</name>
          <defaultValue>simple_api</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Scenario</name>
          <defaultValue>dataview_scenario</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Load_Generators</name>
          <description>Provide the number of Load Generators</description>
          <defaultValue>1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Vusers</name>
          <description>Total No. of Vusers for this tests</description>
          <defaultValue>5</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.9">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit/>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2803.v1a_f77ffcc773">
    <script>pipeline {
    //agent { label 'master || linux_node'}
  agent none

  parameters {
    string(defaultValue: "pptQrX23TOS7WXE0ZvzSo09g", description: 'Neoload Web Token', name: 'token')
    string(defaultValue: "http://neoload-web.int.acd.mykronos.com/", description: 'NeoLoad Web Api Url', name: 'api_url')
    choice(choices: ['dynamic_zone','Regression Zone','Default zone'], name: 'zone_id')
  }

  stages {
    stage('Attach Worker') {
      agent {
        docker {
          image 'python:3-alpine'
        }
      }
      environment {
        NEOLOAD="${WORKSPACE}/.local/bin/neoload"
        HOME="${WORKSPACE}"
        jar_path = "PIntCode/neoload_web/result-template"
      }
	  
      stages {
         /* stage('CleanWorkspace') {
              steps {
                        cleanWs()
                        dir("${env.WORKSPACE}@tmp") { deleteDir() }
                        dir("${env.WORKSPACE}@script") { deleteDir() }
                        dir("${env.WORKSPACE}@script@tmp") { deleteDir() }
                    } 
          }*/
        
        stage ('Copy SQL Files from PIntCode project'){
                    steps {
                        script{
                            echo "${jar_path}"
                            copyArtifacts filter: "${jar_path}/**", projectName: 'GetPIntCode',selector: lastSuccessful()
                           // copyArtifacts filter: "${jar_path}/src/test/resources/**.*", projectName: 'GetPIntCode',selector: lastSuccessful()
                        }
                    }
             }
        stage('Get NeoLoad CLI') {
          steps {
              echo "work : ${WORKSPACE}"
              sh "python3 -m pip install --upgrade pip"
              sh "pip3 install --upgrade wheel"
              sh "apt-get update &amp;&amp; apt-get install -y build-essential"
              sh "pip3 install pyqt5"
              sh "pip3 install -U --pre neoload"
              sh "$NEOLOAD --version"
          }
        }
        /*stage('Get NeoLoad project'){
            steps {
                sh 'rm -f *.yml; wget https://raw.githubusercontent.com/Neotys-Labs/neoload-cli/78a1366743b041088f357f0f702babfce5e55187/tests/neoload_projects/simpledemo.yml'
            }
        }*/
        stage('Prepare NeoLoad test') {
          steps {
              sh """$NEOLOAD login --url ${params.api_url} ${params.token} workspaces use ${params.Workspace_Name} test-settings --zone ${params.zone_id} --lgs ${params.Load_Generators} --scenario ${params.Scenario} use ${params.Project}
                """
          }
        }
        stage('Run Test') {
          steps {
              sh """$NEOLOAD run \
                  --name "Jenkins ${BUILD_NUMBER}" \
                  --external-url '${BUILD_URL}' \
                  --external-url-label 'Jenkins build ${BUILD_NUMBER}' \
                  --description "${params.api} - ${params.scenario} Results" \
                  --return-0 \
                  --web-vu ${params.Vusers} \
                 """
          }
        }
        stage('Generate Test Report') {
          steps {
             sh """
            $NEOLOAD report --template builtin:transactions-json &gt; result.json
            $NEOLOAD report --out-file ~/result.json \
              --template ~/${jar_path}/sample-custom-report.html.j2 \
               --out-file ~/template_result.html
            """
          }
      }
       /* stage('Report')
        {
            steps{
                 sh """
            $NEOLOAD report --out-file ~/temp1.json \
              --template ~/jinja/sample-trends-report.html.j2 \
               --out-file ~/trend.html
            """
            }
        }*/
        stage('Report csv')
        {
            steps{
                 sh """
            $NEOLOAD report --out-file ~/result.json \
              --template ~/${jar_path}/custom_transactions_export_modified.j2 \
               --out-file ~/template_result.csv
            """
            }
        }
        
         stage ('Archieve') 
         {
            steps
            	    {
                		archiveArtifacts allowEmptyArchive: false, artifacts: '*.*', caseSensitive: true, defaultExcludes: true, fingerprint: false, onlyIfSuccessful: false 
                	}
         }
        
        stage('CleanWorkspace') {
              steps {
                        cleanWs()
                        dir("${env.WORKSPACE}@tmp") { deleteDir() }
                        dir("${env.WORKSPACE}@script") { deleteDir() }
                        dir("${env.WORKSPACE}@script@tmp") { deleteDir() }
                    } 
          }
      }
    }
  }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>